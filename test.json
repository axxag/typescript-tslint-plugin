{\"ruleId\":\"@typescript-eslint/no-unused-vars\",\"severity\":1,\"message\":\"'test' is assigned a value but never used. Allowed unused vars must match /^_/u.\",\"line\":27,\"column\":7,\"nodeType\":\"Identifier\",\"messageId\":\"unusedVar\",\"endLine\":27,\"endColumn\":26},{\"ruleId\":\"@typescript-eslint/array-type\",\"severity\":2,\"message\":\"Array type using 'Array<string>' is forbidden for simple types. Use 'string[]' instead.\",\"line\":27,\"column\":13,\"nodeType\":\"TSTypeReference\",\"messageId\":\"errorStringArraySimple\",\"endLine\":27,\"endColumn\":26,\"fix\":{\"range\":[720,733],\"text\":\"string[]\"}}],\"errorCount\":1,\"warningCount\":1,\"fixableErrorCount\":1,\"fixableWarningCount\":0,\"source\":\"import { validateEnvConstants } from '@inspectornexus/constants'\\nimport { getCurrentHub } from '@inspectornexus/hub'\\n\\nimport { BaseClient } from './baseClient'\\n\\nimport type { IClient, IClientOpts } from '@inspectornexus/types'\\n\\nexport type ClientClass<F extends IClient, O extends IClientOpts> = new (\\n  options: O\\n) => F\\n\\nconst initAndBind = <F extends IClient, O extends IClientOpts>(\\n  clientClass: ClientClass<F, O>,\\n  options: O\\n) => {\\n  if (options.disableEnvCheck !== true) {\\n    validateEnvConstants()\\n  }\\n  const hub = getCurrentHub()\\n  const client = new clientClass(options)\\n  hub.bindClient(client)\\n}\\n\\nexport const init = (clientOpts: IClientOpts): void =>\\n  initAndBind(BaseClient, clientOpts)\\n\\nconst test: Array<string> = 'bruh'\\n\"}],\"errorCount\":1,\"warningCount\":1,\"fixableErrorCount\":1,\"fixableWarningCount\":0,\"usedDeprecatedRules\":[]}